<launch>

  <!-- 1: Toggle simulation time utilization parameter -->
	<!-- 2: Publish urdf zed -->
  <!-- 3: ROS URDF description of the ZED -->
  <!-- 4: Play ROSbag recording -->
  <!-- <param name="use_sim_time" value="true" /> -->
  <!-- UNCOMMENT for ROSbag reproduction -->


  <!-- Launch camera ROS-wrapper node -->
  <!-- Stereolabs ZED -->
  <arg name="svo_file"                default="" />

  <include file="$(find zed_wrapper)/launch/zed.launch">
    <arg name="camera_model"        value="0" />
    <arg name="svo_file"            value="$(arg svo_file)" />
  </include>

  <!-- ASUS Xtion -->
  <!-- <include file="$(find manos_vision)/launch/asus_xtion.launch"/> -->

  <!-- Orbbec Astra Pro -->
  <!-- <include file="$(find manos_vision)/launch/orbbec_astra.launch"/> -->

  <!-- COMMENT camera ROS-wrapper module for ROSbag reproduction -->
  <!-- also, COMMENT if you want to use a different camera -->


  <!-- Launch openpose_ros -->
  <node pkg="openpose_ros" type="openpose_ros_node" name="openpose_ros_node" output="screen">
    <rosparam command="load" file="$(find openpose_ros)/config/openpose_ros.yaml"/>
  </node>


  <!-- Launch UR3 description publishing node -->
  <param name="robot_description" command="$(find xacro)/xacro '$(find manos_description)/urdf/ur3_pg70.urdf.xacro'" />
	<node name="joint_state_publisher" pkg="joint_state_publisher" type="joint_state_publisher" />
	<node name="robot_state_publisher" pkg="robot_state_publisher" type="robot_state_publisher" />
  <!-- COMMENT for ROSbag reproduction -->


  <!-- Launch AR marker calibration node -->
  <!-- Stereolabs ZED -->
  <arg name="camera" default="camera" />

  <node pkg="tf" type="static_transform_publisher" name="dummy_tf_publisher"
        args="0 0 0 0 0 0 /dummy_link /zed_left_camera_frame 100" />

  <node pkg="tf" type="static_transform_publisher" name="static_marker_link_publisher"
        args="-0.406 0.406 0 0 0 0 /base_link /ar_marker_link 100" />

  <arg name="marker_size" default="14.4" />
  <arg name="max_new_marker_error" default="0.08" />
  <arg name="max_track_error" default="0.2" />
  <arg name="cam_image_topic" default="/zed/rgb/image_rect_color" />
  <arg name="cam_info_topic" default="/zed/rgb/camera_info" />
  <arg name="output_frame" default="/zed_left_camera_frame" />

  <node name="ar_track_alvar" pkg="ar_track_alvar" type="individualMarkersNoKinect" respawn="false" output="screen">
    <param name="marker_size"           type="double" value="$(arg marker_size)" />
    <param name="max_new_marker_error"  type="double" value="$(arg max_new_marker_error)" />
    <param name="max_track_error"       type="double" value="$(arg max_track_error)" />
    <param name="output_frame"          type="string" value="$(arg output_frame)" />

    <remap from="camera_image"  to="$(arg cam_image_topic)" />
    <remap from="camera_info"   to="$(arg cam_info_topic)" />
  </node>

  <node pkg="tf_based_on_ar_marker" type="tf_based_on_ar_marker.py" respawn="false" name="tf_based_on_ar_marker" output="screen">
    <rosparam file="$(find manos_vision)/config/connect_trees.yaml" command="load" />
  </node>

  <!-- ASUS Xtion & Orbbec Astra Pro -->
  <!-- <arg name="camera" default="camera" />

  <node pkg="tf" type="static_transform_publisher" name="dummy_tf_publisher"
        args="0 0 0 0 0 0 /dummy_link /camera_link 100" />

  <node pkg="tf" type="static_transform_publisher" name="static_marker_link_publisher"
        args="-0.406 0.406 0 0 0 0 /base_link /ar_marker_link 100" />

  <arg name="marker_size" default="14.4" />
  <arg name="max_new_marker_error" default="0.08" />
  <arg name="max_track_error" default="0.2" />
  <arg name="cam_image_topic" default="/camera/rgb/image_raw" />
  <arg name="cam_info_topic" default="/camera/rgb/camera_info" />
  <arg name="output_frame" default="/camera_link" />

  <node name="ar_track_alvar" pkg="ar_track_alvar" type="individualMarkersNoKinect" respawn="false" output="screen">
    <param name="marker_size"           type="double" value="$(arg marker_size)" />
    <param name="max_new_marker_error"  type="double" value="$(arg max_new_marker_error)" />
    <param name="max_track_error"       type="double" value="$(arg max_track_error)" />
    <param name="output_frame"          type="string" value="$(arg output_frame)" />

    <remap from="camera_image"  to="$(arg cam_image_topic)" />
    <remap from="camera_info"   to="$(arg cam_info_topic)" />
  </node>

  <node pkg="tf_based_on_ar_marker" type="tf_based_on_ar_marker.py" respawn="false" name="tf_based_on_ar_marker" output="screen">
    <rosparam file="$(find manos_vision)/config/connect_trees2.yaml" command="load" />
  </node> -->

  <!-- COMMENT AR marker calibration module for ROSbag reproduction -->


  <!-- Launch openpose_ros_receiver_broadcaster node -->
  <node pkg="openpose_ros_receiver" type="openpose_ros_receiver_broadcaster_node" name="openpose_ros_receiver_broadcaster_node" output="screen">
    <rosparam command="load" file="$(find openpose_ros_receiver)/config/openpose_ros_receiver.yaml"/>
  </node>


  <!-- Launch openpose_ros_avoid node -->
  <node pkg="openpose_ros_avoid" type="openpose_ros_avoid_node" name="openpose_ros_avoid_node" output="screen">
    <rosparam command="load" file="$(find openpose_ros_avoid)/config/openpose_ros_avoid.yaml"/>
  </node>


  <!-- Launch openpose_ros_respond node -->
  <!-- <node pkg="openpose_ros_respond" type="openpose_ros_respond_node" name="openpose_ros_respond_node" output="screen">
    <rosparam command="load" file="$(find openpose_ros_respond)/config/openpose_ros_respond.yaml"/>
  </node> -->

</launch>